Description: >
    Magnim AWILI / Udacity final Project  2019
Parameters:
  EnvironmentName:
    Description: An Environment name that will be prefixed to resources
    Type: String

Resources:
  EKSServiceRole:
    Description: 'Amazon EKS Service Role'
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  kubeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our webApp Hosts and ssh only from local
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  KubernetesCluster:
    Type: AWS::EKS::Cluster
      Properties:
      Name: prod
      Version: '1.11'
      RoleArn:
	- Ref: EKSServiceRole
      ResourcesVpcConfig:
        SecurityGroupIds:
        - Ref: kubeSecurityGroup
        SubnetIds:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
Outputs:
  KubernetesClusterEndpoint: 
    Description: this is the endpoint to use for accessing the Kubernetes API server
    Value: !Join [ "", [ 'https://', !GetAtt  KubernetesCluster.Endpoint  ]]
    Export:
       Name: !Sub ${EnvironmentName}-KUBURL

  EKSRole:
    Description: The role that Amazon EKS will use to create AWS resources for Kubernetes clusters
    Value: !GetAtt eksServiceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EKSRole"
  NodesRole:
    Description: The role that the worker node kubelet uses to make calls to the Amazon EKS API on your behalf
    Value: !GetAtt NodeInstanceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-NodesRole"
